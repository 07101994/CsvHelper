<?xml version="1.0" encoding="utf-8"?>
<topic id="f83c2dce-6a4b-4752-a9c8-e549c4101d39" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
      </para>
    </introduction>
    
    <section address="CSV Data">
    	<title>CSV Data</title>
    	<content>
	    	Let's setup some test data for us to use. We will create
			a method that returns a Stream with our CSV data in it. The 
			"hasHeader" parameter will tell the method whether or not to
			create a header record when creating the CSV file. The
			"hasSpacesInHeaderNames" parameter will tell the method whether
			or not to put spaces between the words of the header field names.
			This will allow us to test both auto-reading, and reading by
			specific column names. This data is used throughout the rest of
			the reader examples.
    	</content>
    </section>

    <section address="CSV Data Example">
      <title>Example</title>
      <content>
        <para>
    		<code language="C#">
    			<![CDATA[
private static MemoryStream GetDataStream( bool hasHeader, bool hasSpacesInHeaderNames )
{
	var stream = new MemoryStream();
	var writer = new StreamWriter( stream );

	if( hasHeader )
	{
		var header = hasSpacesInHeaderNames
		             	? "String Column,Int Column,Guid Column,Custom Type Column"
		             	: "StringColumn,IntColumn,GuidColumn,CustomTypeColumn";
		writer.WriteLine( header );
	}
	writer.WriteLine( "one,1,{0},1|2|3", Guid.NewGuid() );
	writer.WriteLine( "two,2,{0},4|5|6", Guid.NewGuid() );
	writer.WriteLine( "\"this, has a comma\",2,{0},7|8|9", Guid.NewGuid() );
	writer.WriteLine( "\"this has \"\"'s\",4,{0},10|11|12", Guid.NewGuid() );
	writer.Flush();
	stream.Position = 0;

	return stream;
}
    			]]>
    		</code>
        </para>
      </content>
    </section>
    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>