<?xml version="1.0" encoding="utf-8"?>
<topic id="356ecdb2-cc52-4eb0-b4a2-d0a9a09d3dae" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
      	Reading fields will give you back the field converted into the specified
      	type using the default TypeConverter for that type, or the specified
      	TypeConverter. You can read by the field's integer position or the
      	column name position.
      </para>
    </introduction>
    
    <section address="Custom Type Converter">
    	<title>Custom Type Converter</title>
    	<content>
    		<para>
    			If you want to get a field using a custom type, you will more than
    			likely need to create a custom type converter to convert the
    			string into your type.
    			
    			<alert>
    				To read, you need to override the CanConvertFrom and
    				ConvertFrom methods of the TypeConverter.
    			</alert>
    			
    			<code language="C#">
    				<![CDATA[
public class CustomTypeTypeConverter : TypeConverter
{
	public override bool CanConvertFrom( ITypeDescriptorContext context, Type sourceType )
	{
		return sourceType == typeof( string );
	}

	public override bool CanConvertTo( ITypeDescriptorContext context, Type destinationType )
	{
		return destinationType == typeof( string );
	}

	public override object ConvertFrom( ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value )
	{
		var values = ( (string)value ).Split( '|' );

		var obj = new CustomType
		{
			First = int.Parse( values[0] ),
			Second = int.Parse( values[1] ),
			Third = int.Parse( values[2] ),
		};
		return obj;
	}

	public override object ConvertTo( ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType )
	{
		var obj = (CustomType)value;
		return string.Format( "{0}|{1}|{2}", obj.First, obj.Second, obj.Third );
	}
}
    				]]>
    			</code>
    		</para>
    	</content>
	</section>
    
    <section address="Reading Fields">
    	<title>Reading Fields</title>
    	<content>
    		<para>
    			All you need to do to read fields is to specify the type you want
    			and the field will automatically be converted to that type. 
    			
    			<alert>
    				If you run into a field that can't be auto-converted, you can 
    				specify a TypeConverter to use.
    			</alert>
    			
    			<code language="C#">
    				<![CDATA[
var customTypeTypeConverter = new CustomTypeTypeConverter();

using( var reader = new CsvReader( new StreamReader( GetDataStream( true, true ) ) ) )
{
	while( reader.Read() )
	{
		Console.Write( reader.GetField<string>( 0 ) + columnSeparator );
		Console.Write( reader.GetField<int>( 1 ) + columnSeparator );
		Console.Write( reader.GetField<Guid>( 2 ) + columnSeparator );
		Console.WriteLine( reader.GetField<CustomType>( 3, customTypeTypeConverter ) );
	}
}
    				]]>
    			</code>
    		</para>
    	</content>
    </section>
    
    <section address="Reading Fields Output">
    	<title>Output</title>
    	<content>
    		<mediaLink>
				<image xlink:href="ReadFieldsByIndexOutput"/>
			</mediaLink>
    	</content>
    </section>
    
    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>